name: Run tests with PyTest
description: Unit test with PyTest and publish results

inputs:
  source:
    description: The directory where the python source code is located, defaults to current directory.
    required: false
    default: .
  configuration:
    description: File path to the pytest configuration file (.ini).
    required: false
    default: ''
  testFolder:
    description: The directory where the tests are located (from the source path), if targetting a specific folder
    required: false
    default: ''
  args:
    description: Additional arguments to pass to pytest.
    required: false
    default: ''
  outputFile:
    description: The file to write the test results to.
    required: false
    default: '${{ github.workspace }}/test-results/results.xml'
  publish:
    description: Whether to publish the test results.
    required: false
    default: true
  githubToken:
    description: The GitHub token to use for checkouting and publishing the test results.
    required: true
    default: ''
  pythonVersion:
    description: The python version to use.
    required: false
    default: '3.9'

runs:
  using: composite
  steps:
    - name: Configure GitHub credentials
      shell: bash
      run: git config --global url."https://${{ env.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"

    - name: Check out source repository
      uses: actions/checkout@v4

    - name: Set up Python environment
      uses: actions/setup-python@v5
      id: setup-python
      with:
        python-version: "${{ inputs.pythonVersion }}"

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: false

    - name: Cache Poetry dependencies
      id: cached-poetry-dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry.lock-build-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    - name: Install dependencies from the cache
      shell: bash
      if: steps.cached-poetry-dependencies.outputs.cache-hit == 'true'
      run: poetry install --no-interaction --with dev,testing

    - name: Install dependencies from Internet
      shell: bash
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --with dev,testing --no-cache

    - name: Running PyTest
      shell: bash
      run: |
        set -e
        test "${{ inputs.source }}" && cd "${{ inputs.source }}"
        ARGS=${{ inputs.args }}
        if [[ "${{ inputs.configuration }}" ]]; then
          echo "::debug::Running tests with configuration from ${{ inputs.configuration }}."
          ARGS="${ARGS} -c \"${{ inputs.configuration }}\""
        else
          echo "::debug::Running tests"
        fi
        pytest ${{ inputs.testFolder }} ${ARGS} \
          --suppress-no-test-exit-code \
          --junit-xml="${{ inputs.outputFile }}"

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: ${{ inputs.publish == 'true' }}
      with:
        files: ${{ inputs.outputFile }}
